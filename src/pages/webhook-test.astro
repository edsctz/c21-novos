---
// Test page for webhook functionality
---

<html lang="pt-BR">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Webhook Test - C21 Novos</title>
  <style>
    body {
      font-family: Arial, sans-serif;
      max-width: 800px;
      margin: 0 auto;
      padding: 20px;
      background: #f5f5f5;
    }
    .test-container {
      background: white;
      padding: 30px;
      border-radius: 10px;
      box-shadow: 0 2px 10px rgba(0,0,0,0.1);
      margin-bottom: 20px;
    }
    .test-form {
      display: grid;
      gap: 15px;
      max-width: 400px;
    }
    .form-group {
      display: flex;
      flex-direction: column;
    }
    label {
      font-weight: bold;
      margin-bottom: 5px;
      color: #333;
    }
    input {
      padding: 10px;
      border: 2px solid #ddd;
      border-radius: 5px;
      font-size: 16px;
    }
    input:focus {
      border-color: #007bff;
      outline: none;
    }
    button {
      padding: 12px 20px;
      background: #007bff;
      color: white;
      border: none;
      border-radius: 5px;
      font-size: 16px;
      cursor: pointer;
      transition: background 0.3s;
    }
    button:hover {
      background: #0056b3;
    }
    button:disabled {
      background: #ccc;
      cursor: not-allowed;
    }
    .test-button {
      background: #28a745;
      margin: 10px 5px;
    }
    .test-button:hover {
      background: #1e7e34;
    }
    .results {
      background: #f8f9fa;
      padding: 15px;
      border-radius: 5px;
      margin-top: 20px;
      border-left: 4px solid #007bff;
    }
    .success {
      border-left-color: #28a745;
      background: #d4edda;
    }
    .error {
      border-left-color: #dc3545;
      background: #f8d7da;
    }
    .hidden {
      display: none;
    }
    pre {
      background: #f1f1f1;
      padding: 10px;
      border-radius: 5px;
      overflow-x: auto;
      font-size: 12px;
    }
  </style>
</head>
<body>
  <div class="test-container">
    <h1>üß™ Webhook Test Page</h1>
    <p>Esta p√°gina testa a implementa√ß√£o do webhook CORS-compliant.</p>
    
    <div class="test-buttons">
      <button class="test-button" onclick="runDirectTest()">üöÄ Teste Direto do Webhook</button>
      <button class="test-button" onclick="runFormTest()">üìù Teste Simula√ß√£o de Formul√°rio</button>
      <button class="test-button" onclick="runFullTests()">üîç Executar Todos os Testes</button>
    </div>
  </div>

  <div class="test-container">
    <h2>üìã Teste Manual do Formul√°rio</h2>
    <p>Preencha e envie este formul√°rio para testar a implementa√ß√£o:</p>
    
    <form id="test-form" class="test-form">
      <div class="form-group">
        <label for="nome">Nome:</label>
        <input type="text" id="nome" name="nome" value="Usu√°rio Teste" required>
      </div>
      
      <div class="form-group">
        <label for="telefone">WhatsApp:</label>
        <input type="tel" id="telefone" name="telefone" value="(11) 99999-9999" required>
      </div>
      
      <button type="submit" id="submit-btn">Enviar Teste</button>
    </form>
  </div>

  <div id="results" class="results hidden">
    <h3>üìä Resultados dos Testes</h3>
    <div id="results-content"></div>
  </div>

  <div id="success-message" class="results success hidden">
    <h3>‚úÖ Sucesso!</h3>
    <p>Formul√°rio enviado com sucesso!</p>
  </div>

  <div id="error-message" class="results error hidden">
    <h3>‚ùå Erro</h3>
    <p>Erro ao enviar formul√°rio. Verifique o console para mais detalhes.</p>
  </div>
</body>

<script>
  // Mock UTM data for testing
  localStorage.setItem('utmData', JSON.stringify({
    utm_source: 'test',
    utm_medium: 'webhook-test',
    utm_campaign: 'cors_test',
    utm_content: 'test_page',
    utm_term: 'webhook'
  }));

  // Test form submission
  document.getElementById('test-form').addEventListener('submit', async function(event) {
    event.preventDefault();
    
    const submitBtn = document.getElementById('submit-btn') as HTMLButtonElement;
    submitBtn.disabled = true;
    submitBtn.textContent = 'Enviando...';
    
    // Get form data
    const formData = new FormData(event.target as HTMLFormElement);
    const formEntries = Object.fromEntries(formData.entries());
    
    // Get UTM parameters
    const utmParameters = JSON.parse(localStorage.getItem('utmData') || '{}');
    
    // Create payload
    const payload = {
      ...formEntries,
      source: 'webhook-test-page',
      timestamp: new Date().toISOString(),
      ...utmParameters
    };
    
    try {
      console.log('üì§ Sending test payload:', payload);
      
      // Send data to webhook
      const response = await fetch('https://workflowwebhook.prospectz.com.br/webhook/lp-novos', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(payload)
      });
      
      console.log('üì• Response:', response.status, response.statusText);
      
      if (response.ok) {
        // Show success message
        document.getElementById('success-message').classList.remove('hidden');
        document.getElementById('error-message').classList.add('hidden');
        (event.target as HTMLFormElement).reset();
        console.log('‚úÖ Form submitted successfully via CORS-compliant method');
      } else {
        throw new Error(`HTTP ${response.status}: ${response.statusText}`);
      }
    } catch (error) {
      console.error('‚ùå Error submitting form:', error);
      // Show error message
      document.getElementById('error-message').classList.remove('hidden');
      document.getElementById('success-message').classList.add('hidden');
    } finally {
      (submitBtn as HTMLButtonElement).disabled = false;
      (submitBtn as HTMLButtonElement).textContent = 'Enviar Teste';
    }
  });

  // Test functions
  async function runDirectTest() {
    console.log('üß™ Running direct webhook test...');
    showResults('Executando teste direto do webhook...', 'info');
    
    const testData = {
      nome: 'Teste Direto',
      telefone: '(11) 99999-9999'
    };
    
    const utmParameters = JSON.parse(localStorage.getItem('utmData') || '{}');
    
    const payload = {
      ...testData,
      source: 'direct-test',
      timestamp: new Date().toISOString(),
      ...utmParameters
    };
    
    try {
      const response = await fetch('https://workflowwebhook.prospectz.com.br/webhook/lp-novos', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(payload)
      });
      
      if (response.ok) {
        showResults('‚úÖ Teste direto do webhook: SUCESSO', 'success');
        console.log('‚úÖ Direct test passed');
      } else {
        showResults(`‚ùå Teste direto do webhook: FALHOU (${response.status})`, 'error');
        console.error('‚ùå Direct test failed:', response.status);
      }
    } catch (error) {
      showResults(`‚ùå Teste direto do webhook: ERRO (${error.message})`, 'error');
      console.error('‚ùå Direct test error:', error);
    }
  }

  function runFormTest() {
    console.log('üìù Running form simulation test...');
    showResults('Executando simula√ß√£o de formul√°rio...', 'info');
    
    // Trigger the actual form submission
    const form = document.getElementById('test-form') as HTMLFormElement;
    form.dispatchEvent(new Event('submit'));
  }

  async function runFullTests() {
    console.log('üîç Running full test suite...');
    showResults('Executando suite completa de testes...', 'info');
    
    await runDirectTest();
    
    setTimeout(() => {
      runFormTest();
    }, 2000);
  }

  function showResults(message, type = 'info') {
    const results = document.getElementById('results');
    const content = document.getElementById('results-content');
    
    results.classList.remove('hidden', 'success', 'error');
    
    if (type === 'success') {
      results.classList.add('success');
    } else if (type === 'error') {
      results.classList.add('error');
    }
    
    const timestamp = new Date().toLocaleTimeString();
    content.innerHTML += `<p><strong>[${timestamp}]</strong> ${message}</p>`;
    
    // Scroll to results
    results.scrollIntoView({ behavior: 'smooth' });
  }

  // Show initial message
  console.log('üîß Webhook test page loaded. Open browser console for detailed logs.');
  showResults('P√°gina de teste carregada. Abra o console do navegador para logs detalhados.', 'info');
</script>
</html>
