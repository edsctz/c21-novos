---
interface Props {
  title?: string;
  description?: string;
  buttonText?: string;
  formId?: string;
  trackingLabel?: string;
  propertyId?: string;
}

const { 
  title = "Receba Pre√ßos e V√≠deos",
  description = "Condi√ß√µes especiais de pr√©-lan√ßamento. Preencha o formul√°rio e receba todas as informa√ß√µes.",
  buttonText = "Receber Informa√ß√µes Completas",
  formId = "lead-form",
  trackingLabel = "Lead Form Submission",
  propertyId = "lead-form"
} = Astro.props;

// Process title to highlight specific words
const processTitle = (titleText: string) => {
  const words = titleText.split(' ');
  return words.map((word, index) => {
    const isHighlighted = word === 'Pre√ßos' || word === 'Tabela' || word === 'Oferta';
    return {
      word,
      isHighlighted,
      key: `word-${index}`
    };
  });
};

const titleWords = processTitle(title);
---

<section class="form-section" id={formId}>
  <div class="container">
    <div class="max-w-4xl mx-auto text-center">
      <h2 class="text-3xl md:text-4xl font-bold text-white mb-4">
        {titleWords.map(({ word, isHighlighted, key }) => (
          isHighlighted ? 
            <span key={key} class="text-gold">{word}</span> : 
            <span key={key}>{word}</span>
        )).reduce((prev, curr, index) => [
          ...prev,
          index > 0 ? ' ' : '',
          curr
        ], [])}
      </h2>
      <p class="text-xl text-gray-300 mb-8">
        {description}
      </p>
      
      <div class="form-container">
        <form class="grid grid-cols-1 md:grid-cols-2 gap-6">
          <div>
            <label for="nome" class="form-label">Nome*</label>
            <input
              type="text"
              id="nome"
              name="nome"
              required
              class="form-input"
              placeholder="Seu nome"
            />
          </div>
          
          <div>
            <label for="telefone" class="form-label">WhatsApp *</label>
            <input
              type="tel"
              id="telefone"
              name="telefone"
              required
              class="form-input"
              placeholder="(11) 99999-9999"
            />
          </div>
          
          <div class="md:col-span-2">
            <button
              type="submit"
              class="form-button"
            >
              {buttonText}
            </button>
          </div>
        </form>
        
        <div class="mt-6 text-center">
          <p class="text-sm text-gray-400">
            Ao enviar, voc√™ concorda com nossa 
            <a href="https://www.c21alpha.com.br/politica-de-privacidade" class="text-gold hover:underline">Pol√≠tica de Privacidade</a>
            e autoriza o contato via WhatsApp e telefone.
          </p>
        </div>
      </div>
    </div>
  </div>
</section>

<script define:vars={{ formId, trackingLabel, propertyId }}>
  document.addEventListener('DOMContentLoaded', function() {
    const form = document.querySelector(`#${formId} form`);
    
    form?.addEventListener('submit', async function(event) {
      event.preventDefault();
      
      console.log('üìù Form submission started for:', formId);
      
      // Get form data
      const formData = new FormData(event.target);
      const formEntries = Object.fromEntries(formData.entries());
      
      // Get UTM parameters
      const utmParameters = JSON.parse(localStorage.getItem('utmData') || '{}');
      
      // Create payload
      const payload = {
        ...formEntries,
        source: propertyId,
        timestamp: new Date().toISOString(),
        ...utmParameters
      };
      
      console.log('üì§ Sending payload:', payload);
      
      try {
        // Send data to webhook using CORS-compliant method
        const response = await fetch('https://workflowwebhook.prospectz.com.br/webhook/lp-novos', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify(payload)
        });
        
        console.log('üì• Response status:', response.status, response.statusText);
        
        if (response.ok) {
          // Success feedback
          form.reset();
          
          // Track successful submission
          if (typeof gtag !== 'undefined') {
            gtag('event', 'generate_lead', {
              event_category: 'Lead Form',
              event_label: trackingLabel,
              value: 1
            });
          }
          
          if (typeof fbq !== 'undefined') {
            fbq('track', 'Lead', {
              content_name: 'Novos',
              content_category: 'Real Estate Lead'
            });
          }
          
          console.log('‚úÖ Form submitted successfully via CORS-compliant method');
          alert('Obrigado! Em breve entraremos em contato com todas as informa√ß√µes.');
        } else {
          throw new Error(`HTTP ${response.status}: ${response.statusText}`);
        }
      } catch (error) {
        console.error('‚ùå Error submitting form:', error);
        alert('Erro ao enviar formul√°rio. Tente novamente ou entre em contato via WhatsApp.');
      }
    });
  });
</script>
