---
import '../styles/century21-tokens.css';
import '../styles/global.css';
import '../styles/mobile-first.css';

interface Props {
  title: string;
  description?: string;
  canonical?: string;
  ogImage?: string;
  noindex?: boolean;
  gtmId?: string;
}

const { 
  title, 
  description = "Empreendimentos imobiliários premium com Century 21 Alpha. Apartamentos de alto padrão em Alphaville e região.",
  canonical,
  ogImage = "/og-image.jpg",
  noindex = false,
  gtmId = "GTM-NKZQXB9J"
} = Astro.props;

const canonicalURL = canonical || new URL(Astro.url.pathname, Astro.site);
const fullTitle = title.includes('Century 21') ? title : `${title} | Century 21 Alpha`;
---

<!doctype html>
<html lang="pt-BR">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="generator" content={Astro.generator} />
    
    <!-- Google Tag Manager -->
    {gtmId && (
      <script define:vars={{ gtmId }}>
        (function(w,d,s,l,i){w[l]=w[l]||[];w[l].push({'gtm.start':
        new Date().getTime(),event:'gtm.js'});var f=d.getElementsByTagName(s)[0],
        j=d.createElement(s),dl=l!='dataLayer'?'&l='+l:'';j.async=true;j.src=
        'https://www.googletagmanager.com/gtm.js?id='+i+dl;f.parentNode.insertBefore(j,f);
        })(window,document,'script','dataLayer',gtmId);
      </script>
    )}
    <!-- End Google Tag Manager -->
    
    <!-- SEO Meta Tags -->
    <title>{fullTitle}</title>
    <meta name="description" content={description} />
    <link rel="canonical" href={canonicalURL} />
    
    {noindex && <meta name="robots" content="noindex, nofollow" />}
    
    <!-- Open Graph / Facebook -->
    <meta property="og:type" content="website" />
    <meta property="og:url" content={canonicalURL} />
    <meta property="og:title" content={fullTitle} />
    <meta property="og:description" content={description} />
    <meta property="og:image" content={new URL(ogImage, Astro.site)} />
    <meta property="og:locale" content="pt_BR" />
    <meta property="og:site_name" content="Century 21 Alpha" />
    
    <!-- Twitter -->
    <meta property="twitter:card" content="summary_large_image" />
    <meta property="twitter:url" content={canonicalURL} />
    <meta property="twitter:title" content={fullTitle} />
    <meta property="twitter:description" content={description} />
    <meta property="twitter:image" content={new URL(ogImage, Astro.site)} />
    
    <!-- Favicon -->
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    
    <!-- Google Fonts -->
    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700;800&family=Source+Sans+Pro:wght@300;400;600;700&display=swap" rel="stylesheet" />
    
    <!-- Local Business Schema -->
    <script type="application/ld+json">
    {
      "@context": "https://schema.org",
      "@type": ["RealEstateAgent", "LocalBusiness"],
      "name": "Century 21 Alpha",
      "description": "Empreendimentos imobiliários premium em Alphaville e região",
      "url": "https://novos.c21alpha.com.br",
      "telephone": "+55-11-99999-9999",
      "address": {
        "@type": "PostalAddress",
        "addressLocality": "Alphaville",
        "addressRegion": "SP",
        "addressCountry": "BR"
      }
    }
    </script>
  </head>
  <body>
    <!-- Google Tag Manager (noscript) -->
    {gtmId && (
      <noscript>
        <iframe src={`https://www.googletagmanager.com/ns.html?id=${gtmId}`}
        height="0" width="0" style="display:none;visibility:hidden"></iframe>
      </noscript>
    )}
    <!-- End Google Tag Manager (noscript) -->
    
    <slot />
    
    <!-- UTM Capture -->
    <script>
      const urlParams = new URLSearchParams(window.location.search);
      const utmData = {};
      
      ['utm_source', 'utm_medium', 'utm_campaign', 'utm_term', 'utm_content'].forEach(param => {
        if (urlParams.get(param)) {
          utmData[param] = urlParams.get(param);
        }
      });
      
      if (Object.keys(utmData).length > 0) {
        localStorage.setItem('utmData', JSON.stringify(utmData));
      }
    </script>
    
    <!-- WhatsApp Tracking -->
    <script>
      /**
       * WhatsApp Click Tracking for GTM
       * This script automatically tracks all WhatsApp button clicks and sends events to GTM
       */

      // Initialize WhatsApp tracking
      function initWhatsAppTracking() {
        // Track existing buttons
        trackExistingButtons();
        
        // Set up observer for dynamically added buttons
        observeNewButtons();
      }

      // Track existing WhatsApp buttons
      function trackExistingButtons() {
        const whatsappButtons = document.querySelectorAll('a[href*="wa.me"], .whatsapp-button');
        
        whatsappButtons.forEach(button => {
          addWhatsAppTracking(button);
        });
      }

      // Add tracking to a specific button
      function addWhatsAppTracking(button) {
        // Avoid adding multiple listeners
        if (button.hasAttribute('data-whatsapp-tracked')) {
          return;
        }
        
        button.setAttribute('data-whatsapp-tracked', 'true');
        
        button.addEventListener('click', function(e) {
          const action = this.getAttribute('data-whatsapp-action') || 'click';
          const location = this.getAttribute('data-whatsapp-location') || getLocationFromContext(this);
          const url = this.href;
          
          // Fire GTM event
          if (typeof window.dataLayer !== 'undefined') {
            window.dataLayer.push({
              event: 'whatsapp_click',
              whatsapp_action: action,
              whatsapp_location: location,
              whatsapp_url: url,
              whatsapp_text: extractWhatsAppText(url)
            });
          }
          
          // Also fire gtag event if available
          if (typeof gtag !== 'undefined') {
            gtag('event', 'whatsapp_click', {
              event_category: 'WhatsApp',
              event_label: `${location}_${action}`,
              value: 1
            });
          }
          
          // Console log for debugging
          console.log('WhatsApp click tracked:', {
            event: 'whatsapp_click',
            action: action,
            location: location,
            url: url,
            text: extractWhatsAppText(url)
          });
        });
      }

      // Get location from button context if not explicitly set
      function getLocationFromContext(button) {
        // Check parent elements for context clues
        const parentClasses = button.closest('[class*="hero"]') ? 'hero' :
                             button.closest('[class*="cta"]') ? 'cta' :
                             button.closest('[class*="nav"]') ? 'navigation' :
                             button.closest('[class*="footer"]') ? 'footer' :
                             button.closest('[class*="sticky"]') ? 'sticky' :
                             'unknown';
        
        return parentClasses;
      }

      // Extract WhatsApp message text from URL
      function extractWhatsAppText(url) {
        try {
          const urlObj = new URL(url);
          return urlObj.searchParams.get('text') || '';
        } catch (e) {
          return '';
        }
      }

      // Observe for dynamically added WhatsApp buttons
      function observeNewButtons() {
        const observer = new MutationObserver(function(mutations) {
          mutations.forEach(function(mutation) {
            mutation.addedNodes.forEach(function(node) {
              if (node.nodeType === Node.ELEMENT_NODE) {
                // Check if the added node is a WhatsApp button
                if (node.matches && (node.matches('a[href*="wa.me"]') || node.matches('.whatsapp-button'))) {
                  addWhatsAppTracking(node);
                }
                
                // Check for WhatsApp buttons within the added node
                const whatsappButtons = node.querySelectorAll ? node.querySelectorAll('a[href*="wa.me"], .whatsapp-button') : [];
                whatsappButtons.forEach(button => {
                  addWhatsAppTracking(button);
                });
              }
            });
          });
        });
        
        observer.observe(document.body, {
          childList: true,
          subtree: true
        });
      }

      // Initialize when DOM is ready
      if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', initWhatsAppTracking);
      } else {
        initWhatsAppTracking();
      }

      // Export for manual initialization if needed
      window.initWhatsAppTracking = initWhatsAppTracking;
      window.addWhatsAppTracking = addWhatsAppTracking;
    </script>
  </body>
</html>
